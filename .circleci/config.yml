# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

jobs:
  cogutil:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/cogutil
    steps:
      - run:
          name: Start restoring ccache
          command: date +%d-%m-%Y > /tmp/date
      - restore_cache:
          keys:
            - ccache-{{ checksum "/tmp/date" }}
            - ccache-
      - checkout
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install CogUtil
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - cogutil
            - ccache

  atomspace:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          PGHOST: opencog-postgres
          PGUSER: opencog_test
          PGPASSWORD: cheese
          CCACHE_DIR: /ws/ccache
      - image: opencog/postgres
        name: opencog-postgres
    working_directory: /ws/atomspace
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Checkout AtomSpace
          command: git clone --depth 1 https://github.com/opencog/atomspace .
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          # Run single-threaded to *maybe* help ParallelUTest not fail
          command: cd build && make check
      - run:
          name: Install AtomSpace
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - save_cache:
          name: Save GHC Cache
          key: ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
          paths:
            - /root/.stack
      - save_cache:
          name: Save Haskell Deps Cache
          key: haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
          paths:
            - /ws/atomspace/opencog/haskell/.stack-work
      - persist_to_workspace:
          root: /ws/
          paths:
            - atomspace
            - ccache

  cogserver:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/cogserver
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make -j2 install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Checkout CogServer
          command: git clone --depth 1 https://github.com/opencog/cogserver .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check
      - run:
          name: Install CogServer
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - cogserver
            - ccache

  attention:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/attention
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install CogServer
          command: cd /ws/cogserver/build && make install && ldconfig
      - run:
          name: Checkout Attention
          command: git clone --depth 1 https://github.com/opencog/attention .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install Attention
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - attention
            - ccache

  unify:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/unify
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Checkout Unify
          command: git clone --depth 1 https://github.com/opencog/unify .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install Unify
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - unify
            # - ccache

  ure:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/ure
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Checkout URE
          command: git clone --depth 1 https://github.com/opencog/ure .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install URE
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - ure
            # - ccache

  miner:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/miner
    steps:
      - attach_workspace:
          at: /ws/
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make install && ldconfig
      - run:
          name: Checkout Miner
          command: git clone --depth 1 https://github.com/opencog/miner .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install Miner
          command: cd build && make install && ldconfig
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - miner
            - ccache

  asmoses:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/asmoses
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make install && ldconfig
      - run:
          name: Checkout AS-MOSES
          command: git clone --depth 1 https://github.com/opencog/asmoses .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      # Temporary fix: install asmoses to please the unit tests
      - run:
          name: Install
          command: cd build && make install
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always

  opencog:
    docker:
      - image: opencog/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/opencog
    steps:
      - attach_workspace:
          at: /ws
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: Set number of make jobs
          command: echo "export MAKEFLAGS=-j2" >> $BASH_ENV
      - run:
          name: Install CogUtil
          command: cd /ws/cogutil/build && make install && ldconfig
      - run:
          name: Install AtomSpace
          command: cd /ws/atomspace/build && make install && ldconfig
      - run:
          name: Install CogServer
          command: cd /ws/cogserver/build && make install && ldconfig
      - run:
          name: Install Attention
          command: cd /ws/attention/build && make install && ldconfig
      - run:
          name: Install Unify
          command: cd /ws/unify/build && make install && ldconfig
      - run:
          name: Install URE
          command: cd /ws/ure/build && make install && ldconfig
      - run:
          name: Install Link Grammar Atomese
          command: |
            git clone --depth 1 https://github.com/opencog/lg-atomese /ws/lg-atomese
            mkdir -p /ws/lg-atomese/build
            cd /ws/lg-atomese/build && cmake .. && make -j2 && make -j2 install
            ldconfig
      - run:
          name: Checkout OpenCog
          command: git clone --depth 1 https://github.com/opencog/opencog .
      - run:
          name: CMake Configure
          command: mkdir build && cd build && cmake ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: cd build && make check ARGS="$MAKEFLAGS"
      - run:
          name: Install OpenCog
          command: cd build && make install && ldconfig
#      - run:
#          name: Build OpenCog package
#          command: cd build && make install && make package
#      - store_artifacts:
#          path: build/packages/
      - run:
          name: Print test log
          command: cat build/tests/Testing/Temporary/LastTest.log
          when: always
      - persist_to_workspace:
          root: /ws/
          paths:
            - opencog
            - ccache

  package:
    docker:
      - image: opencog/opencog-deps
        user: root
    working_directory: /ws/cogutil
    steps:
      - attach_workspace:
          at: /ws/
      - run:
          name: Build Debian package
          command: cd build && make install && make package
      - store_artifacts:
          path: build/packages/
      - run:
          name: Start storing ccache
          command: date +%d-%m-%Y > /tmp/date
      - save_cache:
          key: ccache-{{ checksum "/tmp/date" }}
          paths:
            - /ws/ccache

workflows:
  version: 2.1
  build-test-package:
    jobs:
      - cogutil
      - atomspace:
          requires:
            - cogutil
      - cogserver:
          requires:
            - atomspace
      - attention:
          requires:
            - cogserver
      - unify:
          requires:
            - atomspace
      - ure:
          requires:
            - atomspace
            - unify
      - miner:
          requires:
            - ure
      - asmoses:
          requires:
            - cogutil
            - atomspace
            - ure
      - opencog:
          requires:
            - atomspace
            - ure
            - cogserver
            - attention
      - package:
          requires:
            - opencog
          filters:
            branches:
              only: master

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Node orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
#  node: circleci/node@5.2
  # The heroku orb contains a set of prepackaged CircleCI configuration you can utilize to deploy applications to heroku
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/heroku
  # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
  # See here https://circleci.com/docs/set-environment-variable/#set-an-environment-variable-in-a-project
  heroku: circleci/heroku@2.0

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
#workflows:
#  sample:
#    jobs:
#      - node/test
#      - heroku/deploy-via-git:
#          force: true # this parameter instructs the push to use a force flag when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git
#          requires:
#            - node/test # only run deploy-via-git job if the build job has completed
#          filters:
#            branches:
              # This sample config runs this job on any branch matching the regex below, however, it's more likely you want to only run this job on master.
#              only: /.*-heroku-deploy/ # Delete this line
              # only: master  # Uncomment this line