name: Multi-Platform Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build on ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        build_type: [Release, Debug]
        include:
          - os: ubuntu-20.04
            container: opencog/opencog-deps:ubuntu-20.04
          - os: ubuntu-22.04
            container: opencog/opencog-deps:ubuntu-22.04
    
    container:
      image: ${{ matrix.container }}
      options: --user root
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.build_type }}-
            ${{ runner.os }}-${{ matrix.os }}-
      
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y ccache
          echo "/usr/lib/ccache" >> $GITHUB_PATH
      
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      
      - name: Build
        run: |
          cd build
          make -j$(nproc)
      
      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure -j$(nproc) || true
      
      - name: Generate test report
        if: always()
        run: |
          cd build
          ctest --rerun-failed --output-on-failure || true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/Testing/Temporary/
            build/**/test-results/
          retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run clang-format check
        run: |
          find . -name "*.cpp" -o -name "*.h" -o -name "*.cc" | \
            xargs clang-format --dry-run --Werror || \
            echo "Code formatting issues found"
      
      - name: Run cppcheck
        run: |
          apt-get update && apt-get install -y cppcheck
          cppcheck --enable=all --error-exitcode=1 \
            --suppress=missingIncludeSystem \
            --inline-suppr \
            -I include/ \
            src/ || echo "Static analysis issues found"

  sanitizer-builds:
    name: Sanitizer Build - ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, thread, undefined]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure with sanitizer
        run: |
          mkdir -p build-${{ matrix.sanitizer }}
          cd build-${{ matrix.sanitizer }}
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
            -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"
      
      - name: Build with sanitizer
        run: |
          cd build-${{ matrix.sanitizer }}
          make -j$(nproc)
      
      - name: Run tests with sanitizer
        run: |
          cd build-${{ matrix.sanitizer }}
          export ASAN_OPTIONS=detect_leaks=0
          export TSAN_OPTIONS=halt_on_error=0
          export UBSAN_OPTIONS=print_stacktrace=1
          ctest --output-on-failure -j1 || true