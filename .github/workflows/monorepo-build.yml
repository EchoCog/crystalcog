name: OpenCog Central Monorepo Build

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
        - RelWithDebInfo
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      skip_install:
        description: 'Skip installation'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'Release' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || false }}
  SKIP_INSTALL: ${{ github.event.inputs.skip_install || false }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  MAKEFLAGS: -j$(nproc)

permissions:
  contents: read
  packages: read

jobs:
  # =================================================================
  # System Dependencies Setup
  # =================================================================
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=$(date +%Y-%m-%d)-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ccache-

  # =================================================================
  # Core Components Build
  # =================================================================
  core-build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ccache-

      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            ccache \
            git \
            wget \
            curl \
            libboost-all-dev \
            libboost-filesystem-dev \
            libboost-program-options-dev \
            libboost-system-dev \
            libboost-thread-dev \
            python3-dev \
            python3-pip \
            python3-venv \
            guile-3.0-dev \
            cython3 \
            valgrind \
            doxygen \
            libpqxx-dev \
            postgresql-client \
            ghc \
            libghc-*-dev \
            stack \
            nodejs \
            npm \
            rustc \
            cargo

      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js environment
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Setup Rust environment
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build --release
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build core components
        run: |
          cd build
          make all-components -j$(nproc)

      - name: Test core components
        if: ${{ env.SKIP_TESTS != 'true' }}
        run: |
          cd build
          ctest --output-on-failure

      - name: Install core components
        if: ${{ env.SKIP_INSTALL != 'true' }}
        run: |
          cd build
          make install

      - name: Save ccache
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}-core

  # =================================================================
  # Integration Tests
  # =================================================================
  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, core-build]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
          POSTGRES_DB: opencog_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PGHOST: postgres
      PGUSER: opencog_test
      PGPASSWORD: cheese
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}-integration
          restore-keys: |
            ccache-${{ needs.setup.outputs.cache-key }}-core
            ccache-

      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            ccache \
            git \
            wget \
            curl \
            libboost-all-dev \
            libboost-filesystem-dev \
            libboost-program-options-dev \
            libboost-system-dev \
            libboost-thread-dev \
            python3-dev \
            python3-pip \
            python3-venv \
            guile-3.0-dev \
            cython3 \
            valgrind \
            doxygen \
            libpqxx-dev \
            postgresql-client \
            ghc \
            libghc-*-dev \
            stack \
            nodejs \
            npm \
            rustc \
            cargo

      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js environment
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Setup Rust environment
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build --release
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build all components
        run: |
          cd build
          make all-components -j$(nproc)

      - name: Run integration tests
        if: ${{ env.SKIP_TESTS != 'true' }}
        run: |
          cd build
          ctest --output-on-failure -j$(nproc)

      - name: Install all components
        if: ${{ env.SKIP_INSTALL != 'true' }}
        run: |
          cd build
          make install-all

      - name: Save ccache
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}-integration

  # =================================================================
  # Documentation Generation
  # =================================================================
  documentation:
    runs-on: ubuntu-latest
    needs: [setup, core-build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ccache-

      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            ccache \
            git \
            wget \
            curl \
            libboost-all-dev \
            libboost-filesystem-dev \
            libboost-program-options-dev \
            libboost-system-dev \
            libboost-thread-dev \
            python3-dev \
            python3-pip \
            python3-venv \
            guile-3.0-dev \
            cython3 \
            valgrind \
            doxygen \
            libpqxx-dev \
            postgresql-client \
            ghc \
            libghc-*-dev \
            stack \
            nodejs \
            npm \
            rustc \
            cargo

      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js environment
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Setup Rust environment
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build --release
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build all components
        run: |
          cd build
          make all-components -j$(nproc)

      - name: Generate documentation
        run: |
          cd build
          make doc

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: build/doc/

  # =================================================================
  # Package Creation
  # =================================================================
  package:
    runs-on: ubuntu-latest
    needs: [setup, core-build, integration-tests]
    if: ${{ env.SKIP_INSTALL != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ccache-

      - name: Setup system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            ccache \
            git \
            wget \
            curl \
            libboost-all-dev \
            libboost-filesystem-dev \
            libboost-program-options-dev \
            libboost-system-dev \
            libboost-thread-dev \
            python3-dev \
            python3-pip \
            python3-venv \
            guile-3.0-dev \
            cython3 \
            valgrind \
            doxygen \
            libpqxx-dev \
            postgresql-client \
            ghc \
            libghc-*-dev \
            stack \
            nodejs \
            npm \
            rustc \
            cargo \
            checkinstall

      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js environment
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Setup Rust environment
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build --release
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build all components
        run: |
          cd build
          make all-components -j$(nproc)

      - name: Create package
        run: |
          cd build
          checkinstall --pkgname=opencog-central --pkgversion=1.0.0 --backup=no --fstrans=no --default

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: build/*.deb

  # =================================================================
  # Summary
  # =================================================================
  summary:
    runs-on: ubuntu-latest
    needs: [setup, core-build, integration-tests, documentation, package]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## OpenCog Central Monorepo Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Tests:** ${{ env.SKIP_TESTS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Install:** ${{ env.SKIP_INSTALL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup:** ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Core Build:** ${{ needs.core-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation:** ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** ${{ needs.package.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts from the completed jobs" >> $GITHUB_STEP_SUMMARY
          echo "2. Install the package on your system" >> $GITHUB_STEP_SUMMARY
          echo "3. Run `sudo ldconfig` to update library cache" >> $GITHUB_STEP_SUMMARY