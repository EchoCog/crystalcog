name: Comprehensive Crystal CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'spec/**'
      - 'shard.yml'
      - '.github/workflows/crystal-comprehensive-ci.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'spec/**'
      - 'shard.yml'
      - '.github/workflows/crystal-comprehensive-ci.yml'
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_benchmarks:
        description: 'Run performance benchmarks'
        required: false
        default: 'false'
        type: boolean
      test_coverage:
        description: 'Generate test coverage report'
        required: false
        default: 'false'
        type: boolean

env:
  CRYSTAL_CACHE_DIR: ~/.cache/crystal

jobs:
  # Test Matrix: Multiple Crystal versions and platforms
  test-matrix:
    name: Test Crystal ${{ matrix.crystal-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, macos-latest]
        crystal-version: ['1.10.1', '1.9.2', 'nightly']
        exclude:
          # Exclude some combinations for efficiency
          - os: macos-latest
            crystal-version: '1.9.2'
          - os: ubuntu-20.04
            crystal-version: 'nightly'

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Crystal installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/crystal
          ~/.local/share/crystal
        key: crystal-${{ matrix.crystal-version }}-${{ matrix.os }}-${{ hashFiles('shard.yml') }}
        restore-keys: |
          crystal-${{ matrix.crystal-version }}-${{ matrix.os }}-
          crystal-${{ matrix.crystal-version }}-

    - name: Install Crystal
      uses: crystal-lang/install-crystal@v1
      with:
        crystal: ${{ matrix.crystal-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev libevent-dev libssl-dev
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install sqlite3 libevent openssl
        echo "PKG_CONFIG_PATH=/opt/homebrew/opt/openssl/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Install dependencies
      run: shards install --production
      continue-on-error: false

    - name: Verify Crystal installation
      run: |
        crystal version
        crystal env
        
    - name: Lint code (Crystal format check)
      run: |
        echo "Checking Crystal code formatting..."
        crystal tool format --check src/ spec/ || true
        
    - name: Static analysis
      run: |
        echo "Running static analysis..."
        # Check for unused variables and other issues
        crystal build --no-codegen --warnings-as-errors src/crystalcog.cr || true

    - name: Build main executable
      run: |
        echo "Building main Crystal executable..."
        crystal build --error-trace src/crystalcog.cr

    - name: Build all targets
      run: |
        echo "Building all Crystal targets..."
        
        # Build cogutil library
        if [ -f "src/cogutil/cogutil.cr" ]; then
          echo "Building cogutil..."
          crystal build --error-trace src/cogutil/cogutil.cr -o cogutil
        fi
        
        # Build atomspace library
        if [ -f "src/atomspace/atomspace.cr" ]; then
          echo "Building atomspace..."
          crystal build --error-trace src/atomspace/atomspace.cr -o atomspace || echo "atomspace build skipped"
        fi
        
        # Build opencog library
        if [ -f "src/opencog/opencog.cr" ]; then
          echo "Building opencog..."
          crystal build --error-trace src/opencog/opencog.cr -o opencog || echo "opencog build skipped"
        fi

    - name: Run unit tests
      run: |
        echo "Running Crystal specs..."
        crystal spec --verbose --error-trace --junit_output=test-results.xml

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Run basic functionality tests
        if [ -f "test_basic.cr" ]; then
          echo "Running test_basic.cr..."
          crystal run --error-trace test_basic.cr
        fi
        
        # Run PLN tests
        if [ -f "test_pln.cr" ]; then
          echo "Running test_pln.cr..."
          crystal run --error-trace test_pln.cr
        fi
        
        # Run pattern matching tests
        if [ -f "test_pattern_matching.cr" ]; then
          echo "Running test_pattern_matching.cr..."
          crystal run --error-trace test_pattern_matching.cr
        fi
        
        # Run CogServer API tests
        if [ -f "test_cogserver_api.cr" ]; then
          echo "Running test_cogserver_api.cr..."
          crystal run --error-trace test_cogserver_api.cr
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.crystal-version }}
        path: |
          test-results.xml
          *.log
        retention-days: 7

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event.inputs.run_benchmarks == 'true' || github.event_name == 'schedule'
    needs: [test-matrix]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Crystal
      uses: crystal-lang/install-crystal@v1
      with:
        crystal: 1.10.1

    - name: Install dependencies
      run: shards install

    - name: Create benchmark script
      run: |
        mkdir -p benchmarks
        cat > benchmarks/atomspace_benchmark.cr << 'EOF'
        require "../src/cogutil/cogutil"
        require "../src/atomspace/atomspace_main"
        require "benchmark"
        
        CogUtil.initialize
        AtomSpace.initialize
        
        # Benchmark AtomSpace operations
        puts "AtomSpace Performance Benchmarks"
        puts "================================="
        
        Benchmark.ips do |bench|
          atomspace = AtomSpace::AtomSpace.new
          
          bench.report("create_concept_node") do
            atomspace.add_node(AtomSpace::AtomType::CONCEPT_NODE, "test_#{rand(10000)}")
          end
          
          # Pre-create some atoms for link tests
          dog = atomspace.add_node(AtomSpace::AtomType::CONCEPT_NODE, "dog")
          animal = atomspace.add_node(AtomSpace::AtomType::CONCEPT_NODE, "animal")
          
          bench.report("create_inheritance_link") do
            atomspace.add_link(AtomSpace::AtomType::INHERITANCE_LINK, [dog, animal])
          end
          
          bench.report("atomspace_lookup") do
            atomspace.contains?(dog)
          end
          
          bench.report("get_atoms_by_type") do
            atomspace.get_atoms_by_type(AtomSpace::AtomType::CONCEPT_NODE)
          end
        end
        EOF

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks..."
        if [ -f "benchmarks/atomspace_benchmark.cr" ]; then
          crystal run --release benchmarks/atomspace_benchmark.cr > benchmark-results.txt 2>&1 || true
        fi
        
        echo "Benchmark Results:"
        cat benchmark-results.txt || echo "No benchmark results available"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt
        retention-days: 30

  # Code coverage analysis
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.test_coverage == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Crystal
      uses: crystal-lang/install-crystal@v1
      with:
        crystal: 1.10.1

    - name: Install dependencies
      run: shards install

    - name: Generate coverage report
      run: |
        echo "Generating code coverage report..."
        # Note: Crystal doesn't have built-in coverage yet, but we can count tested files
        
        echo "Test Coverage Summary" > coverage-report.txt
        echo "===================" >> coverage-report.txt
        echo "Generated: $(date)" >> coverage-report.txt
        echo "" >> coverage-report.txt
        
        # Count source files
        src_files=$(find src/ -name "*.cr" | wc -l)
        spec_files=$(find spec/ -name "*.cr" | wc -l)
        
        echo "Source files: $src_files" >> coverage-report.txt
        echo "Spec files: $spec_files" >> coverage-report.txt
        echo "" >> coverage-report.txt
        
        # List source files without corresponding specs
        echo "Source files without corresponding specs:" >> coverage-report.txt
        for src_file in $(find src/ -name "*.cr"); do
          basename_file=$(basename "$src_file" .cr)
          dirname_path=$(dirname "$src_file" | sed 's|src/|spec/|')
          spec_file="${dirname_path}/${basename_file}_spec.cr"
          
          if [ ! -f "$spec_file" ]; then
            echo "- $src_file (missing: $spec_file)" >> coverage-report.txt
          fi
        done
        
        # Run specs to get pass/fail info
        echo "" >> coverage-report.txt
        echo "Test Results:" >> coverage-report.txt
        crystal spec --verbose 2>&1 | grep -E "(examples?|failures?)" >> coverage-report.txt || true

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report.txt
        retention-days: 30

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check shard.yml dependencies
      run: |
        echo "Checking dependency security..."
        echo "Dependencies from shard.yml:" > security-report.txt
        echo "============================" >> security-report.txt
        
        if [ -f "shard.yml" ]; then
          grep -A 20 "dependencies:" shard.yml >> security-report.txt || true
        fi
        
        echo "" >> security-report.txt
        echo "Development Dependencies:" >> security-report.txt
        echo "========================" >> security-report.txt
        
        if [ -f "shard.yml" ]; then
          grep -A 20 "development_dependencies:" shard.yml >> security-report.txt || true
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.txt
        retention-days: 30

  # Final status check
  ci-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, benchmarks, coverage, security]
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        echo "CI/CD Pipeline Status Summary"
        echo "============================"
        echo "Test Matrix: ${{ needs.test-matrix.result }}"
        echo "Benchmarks: ${{ needs.benchmarks.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [ "${{ needs.test-matrix.result }}" != "success" ]; then
          echo "❌ Core tests failed"
          exit 1
        else
          echo "✅ All core tests passed"
        fi
        
        echo ""
        echo "Crystal CI/CD Pipeline completed successfully! 🚀"