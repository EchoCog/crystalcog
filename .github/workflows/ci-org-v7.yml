# .github/workflows/ci-org-v3.yml

name: CI Org v3

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CCACHE_DIR: /ws/ccache
  MAKEFLAGS: -j2

jobs:
  build-and-test:
    name: Build and Test All Components
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
      env:
        CCACHE_DIR: /ws/ccache
        MAKEFLAGS: -j2
    services:
      opencog-postgres:
        image: opencog/postgres
        env:
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
          POSTGRES_DB: atomspace_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # 1. Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Install Build Dependencies
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache pkg-config cmake build-essential git

      # 3. Build and Install CogUtil
      - name: Build and Install CogUtil
        run: |
          git clone https://github.com/opencog/cogutil.git
          mkdir -p cogutil/build
          cd cogutil/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 4. Build and Install AtomSpace
      - name: Build and Install AtomSpace
        run: |
          git clone https://github.com/opencog/atomspace.git
          mkdir -p atomspace/build
          cd atomspace/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 5. Build and Install CogServer
      - name: Build and Install CogServer
        run: |
          git clone https://github.com/opencog/cogserver.git
          mkdir -p cogserver/build
          cd cogserver/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 6. Build and Install OpenCog
      - name: Build and Install OpenCog
        run: |
          git clone https://github.com/opencog/opencog.git
          mkdir -p opencog/build
          cd opencog/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 7. Build and Install AsmoSES
      - name: Build and Install AsmoSES
        run: |
          git clone https://github.com/opencog/asmoses.git
          mkdir -p asmoses/build
          cd asmoses/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 8. Build and Install URE
      - name: Build and Install URE
        run: |
          git clone https://github.com/opencog/ure.git
          mkdir -p ure/build
          cd ure/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 9. Build and Install Unify
      - name: Build and Install Unify
        run: |
          git clone https://github.com/opencog/unify.git
          mkdir -p unify/build
          cd unify/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 10. Build and Install Attention
      - name: Build and Install Attention
        run: |
          git clone https://github.com/opencog/attention.git
          mkdir -p attention/build
          cd attention/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 11. Build and Install Miner
      - name: Build and Install Miner
        run: |
          git clone https://github.com/opencog/miner.git
          mkdir -p miner/build
          cd miner/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      # 12. Run Tests for Each Component
      - name: Run Tests
        run: |
          # AtomSpace Tests
          cd atomspace/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # CogServer Tests
          cd cogserver/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # OpenCog Tests
          cd opencog/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # AsmoSES Tests
          cd asmoses/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # URE Tests
          cd ure/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # Unify Tests
          cd unify/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # Attention Tests
          cd attention/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

          # Miner Tests
          cd miner/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../..

      # 13. Upload Test Logs
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            atomspace/build/tests/Testing/Temporary/LastTest.log
            cogserver/build/tests/Testing/Temporary/LastTest.log
            opencog/build/tests/Testing/Temporary/LastTest.log
            asmoses/build/tests/Testing/Temporary/LastTest.log
            ure/build/tests/Testing/Temporary/LastTest.log
            unify/build/tests/Testing/Temporary/LastTest.log
            attention/build/tests/Testing/Temporary/LastTest.log
            miner/build/tests/Testing/Temporary/LastTest.log

      # 14. (Optional) Package Components
      - name: Package Components
        if: github.ref == 'refs/heads/main'
        run: |
          # AtomSpace Packaging
          cd atomspace/build
          make package || echo "AtomSpace package target not defined."
          cd ../..

          # Repeat packaging for other components as needed

      # 15. Upload Build Artifacts
      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            cogutil/build/
            atomspace/build/
            cogserver/build/
            opencog/build/
            asmoses/build/
            ure/build/
            unify/build/
            attention/build/
            miner/build/

